===================================
 1


CREATE table pictures(
	id INT primary key auto_increment,
    url varchar(100) not null,
    added_on datetime not null
);

create table categories(
	id int primary key auto_increment,
    `name` varchar(40) not null unique
);

create table products(
	id int primary key auto_increment,
    `name` varchar(40) not null unique,
    best_before date,
    price decimal(10,2) not null,
    description text,
    category_id int not null,
    picture_id int not null,
    constraint `fk_products_categories`
    foreign key (category_id)
    references categories(id),
    constraint `fk_products_pictures`
    foreign key (picture_id)
    references pictures(id)
);

create table towns(
	id int primary key auto_increment,
    name varchar(20) not null unique
);

create table addresses(
	id int primary key auto_increment,
    `name` varchar(50) not null unique,
    town_id int not null,
    constraint fk_addresses_towns
    foreign key (town_id)
    references towns(id)
);

create table stores (
	id int primary key auto_increment,
    `name` varchar(20) not null unique,
    rating float not null,
    has_parking boolean default 0,
    address_id int not null,
    constraint fk_stores_addresses
    foreign key (address_id)
    references addresses(id)
);

create table products_stores (
	product_id int not null,
    store_id int not null,
    constraint pk_product_stores
    primary key (product_id , store_id),
    constraint fk_product_stores_product
    foreign key (product_id)
    references products(id),
    constraint fk_product_stores_stores
    foreign key (store_id)
    references stores(id)
);

create table employees(
	id int primary key auto_increment,
    first_name varchar(15) not null,
    middle_name char,
    last_name varchar(20) not null,
    salary decimal(19,2) default 0,
    hire_date date not null,
    manager_id int,
    store_id int not null,
    constraint fk_employees_stores
    foreign key (store_id)
    references stores(id),
    constraint fk_employees_employees
    foreign key (manager_id)
    references employees(id)
);
===================================
===================================
2
insert into products_stores(product_id,store_id)
(select p.id,1 from products as p where p.id not in (select product_id from products_stores as ps));
 
===================================
===================================
3
update employees
set manager_id = 3, salary = salary - 500
where year(hire_date) > 2003 and store_id not in (select id from stores where name in ('Cardguard','Veribet'));
 
===================================
===================================
4
 delete from employees where salary >= 6000 and manager_id is not null;
 
===================================
===================================
5
select first_name, middle_name, last_name, salary, hire_date
from employees
order by hire_date desc;
 
===================================
===================================
6
select p.name, p.price, p.best_before, concat(left(p.description,10),'...'), pic.url
from products as p
JOIN pictures as pic
on p.picture_id = pic.id
where char_length(p.description) > 100 and year(pic.added_on) < 2019 and p.price > 20 
order by p.price desc;
 
===================================
===================================
 7
select s.name, count(p.id) as count, round(avg(p.price),2) as avg_price
from stores as s
left join products_stores as ps
on s.id = ps.store_id
left join products as p
on ps.product_id = p.id
group by s.name
order by `count` desc,avg_price desc, s.id;
===================================
===================================
8
select concat(e.first_name,' ',e.last_name) as full_name, s.`name`,a.`name`, e.salary
FROM employees as e
join stores as s
on e.store_id = s.id
join addresses as a
on s.address_id = a.id
where e.salary < 4000 and a.name like '%5%' and char_length(s.name) > 8 and right(e.last_name,1) = 'n';
 
===================================
===================================
9
select reverse(s.name) as reversed_name, concat(upper(t.name),'-',a.name) as full_address, count(e.id) as emp_count
from stores as s
join addresses as a
on s.address_id = a.id
join towns as t
on a.town_id = t.id
join employees as e
on s.id = e.store_id
group by s.name
order by full_address;
 
===================================
===================================
10
CREATE  FUNCTION `udf_top_paid_employee_by_store`(store_name varchar(50)) RETURNS varchar(100)
    
BEGIN

RETURN (select concat(e.first_name,' ',e.middle_name,'. ',e.last_name,' works in store for ' , 2020 - year(e.hire_date), ' years')
from employees as e
join stores as s
on s.id = e.store_id
where s.`name` = store_name
order by salary desc
limit 1);
END
 
===================================
11
CREATE PROCEDURE `procedure udp_update_product_price` (address_name VARCHAR (50))
BEGIN
declare increase int;
	if address_name like '0%' then set increase = 100;
	else set increase = 200;
    end if;
update products as p set price = price + increase
where p.id in (
	select ps.product_id from addresses as a
	join stores as s on a.id = s.addresses_id
    join products_stores as ps on ps.store_id = s.id
    where a.name = address_name
);

END

===================================
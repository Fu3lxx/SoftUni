----------------------------------------------
1
CREATE PROCEDURE `usp_get_employees_salary_above_35000`()
BEGIN
	SELECT `first_name`, `last_name`
    FROM `employees`
	WHERE `salary` > 35000
    ORDER BY `first_name`,`last_name`,`employee_id` asc;

END
 
----------------------------------------------
2
CREATE  PROCEDURE `usp_get_employees_salary_above`(emp_salary DECIMAL(20,4))
BEGIN
	SELECT `first_name`, `last_name`
    FROM `employees`
	WHERE `salary` >= emp_salary
    ORDER BY `first_name`,`last_name`,`employee_id` asc;
END
 
----------------------------------------------
3
CREATE  PROCEDURE `usp_get_towns_starting_with` (start_str varchar(20))
BEGIN
	SELECT `name`
	FROM `towns`
	WHERE `name` LIKE concat(start_str, '%')
	ORDER BY `name`;
END
 
----------------------------------------------
4
CREATE  PROCEDURE `usp_get_employees_from_town` (town_name varchar(20))
BEGIN
	SELECT e.`first_name`, e.`last_name`
	FROM `employees` as e
    JOIN `addresses` as a
    ON e.`address_id` = a.`address_id`
    JOIN `towns` as t
    ON a.`town_id` = t.`town_id`
    
	WHERE t.`name` = town_name
	ORDER BY e.`first_name`, e.`last_name`, e.`employee_id`;
END
 
----------------------------------------------
5
CREATE FUNCTION `ufn_get_salary_level`(emp_salary decimal)
RETURNS VARCHAR(10)
deterministic
BEGIN

RETURN 
(CASE
	WHEN emp_salary < 30000 THEN 'Low'
    WHEN emp_salary between 30000 and 50000 THEN 'Average'
    WHEN emp_salary > 50000 THEN 'High'
    
END);
END
 
----------------------------------------------
6
CREATE PROCEDURE `usp_get_employees_by_salary_level`(salary_level varchar(20))
BEGIN
	SELECT `first_name`, `last_name`
    FROM `employees`
	WHERE  (CASE
		WHEN `salary_level` = 'low' THEN salary < 30000
		WHEN `salary_level` = 'average' THEN salary between 30000 and 50000
		WHEN `salary_level` = 'high' THEN salary > 50000
    END)
    ORDER BY `first_name` desc ,`last_name` desc;

END
 
----------------------------------------------
7
CREATE FUNCTION `ufn_is_word_comprised`(set_of_letters varchar(50), word varchar(50))
RETURNS BIT
deterministic
BEGIN

RETURN (SELECT word REGEXP(concat('^[',set_of_letters,']+$')));

END
 
----------------------------------------------
8
CREATE  PROCEDURE `usp_get_holders_full_name`()
BEGIN
	SELECT concat(`first_name`,' ',`last_name`) as full_name
	FROM `account_holders` 
    
	ORDER BY full_name,id ;
END
 
----------------------------------------------
9
CREATE PROCEDURE `usp_get_holders_with_balance_higher_than`(supplied_number DECIMAL)
BEGIN
	SELECT ah.first_name, ah.last_name
	FROM `accounts` as a
    JOIN `account_holders` as ah
    ON a.`account_holder_id` = ah.`id`
    group by a.`account_holder_id`
    having sum(a.balance) > supplied_number
    ORDER BY ah.id ;
END
 
----------------------------------------------
10
CREATE  FUNCTION `ufn_calculate_future_value`(sum decimal(20,4),yearly_interest_rate double,number_of_years int ) RETURNS decimal(20,4)
    DETERMINISTIC
BEGIN

RETURN `sum` * (pow(1+yearly_interest_rate,number_of_years));
END
 
----------------------------------------------
11
CREATE PROCEDURE `usp_withdraw_money` (account_id int, money_amount decimal(19,4))
BEGIN
	START TRANSACTION;
    IF (SELECT count(*) FROM accounts WHERE id = account_id) = 0
		OR ( (SELECT balance from accounts where id = account_id) < money_amount)
        OR money_amount <= 0
		THEN ROLLBACK;
    ELSE
		UPDATE accounts
		SET `balance` = `balance` - money_amount
		WHERE id = account_id;
    END IF;
    
END


 
----------------------------------------------
12

CREATE PROCEDURE `usp_deposit_money` (account_id int, money_amount decimal(19,4))
BEGIN
	START TRANSACTION;
    IF (SELECT count(*) FROM accounts WHERE id = account_id) = 0
		OR (money_amount <= 0)
		THEN ROLLBACK;
    ELSE
		UPDATE accounts
		SET `balance` = `balance` + money_amount
		WHERE id = account_id;
    END IF;
    
END
 
----------------------------------------------
13
CREATE PROCEDURE `usp_withdraw_money` (account_id int, money_amount decimal(19,4))
BEGIN
	START TRANSACTION;
    IF (SELECT count(*) FROM accounts WHERE id = account_id) = 0
		OR ( (SELECT balance from accounts where id = account_id) < money_amount)
        OR money_amount <= 0
		THEN ROLLBACK;
    ELSE
		UPDATE accounts
		SET `balance` = `balance` - money_amount
		WHERE id = account_id;
    END IF;
    
END
 
----------------------------------------------
14
CREATE PROCEDURE `usp_transfer_money` (from_account_id int, to_account_id int, money_amount decimal(19,4))
BEGIN
	START TRANSACTION;
    IF 
		(SELECT count(*) FROM accounts WHERE id = from_account_id) = 0
        OR (SELECT count(*) FROM accounts WHERE id = to_account_id) = 0
		OR ( (SELECT balance from accounts where id = from_account_id) < money_amount)
        OR from_account_id = to_account_id
        OR money_amount <= 0
		THEN ROLLBACK;
    ELSE
		UPDATE accounts
		SET `balance` = `balance` - money_amount
		WHERE id = from_account_id;
        UPDATE accounts
		SET `balance` = `balance` + money_amount
		WHERE id = to_account_id;
    END IF;
    
END
 
----------------------------------------------
 